// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tasks.DAL;

namespace Tasks.DAL.Migrations
{
    [DbContext(typeof(TasksDbConext))]
    [Migration("20230221124330_UpdateSeedMigration")]
    partial class UpdateSeedMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Tasks.Buisness.ProjectEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e4e30ed-cd5d-454f-b236-49e5263b1765"),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 296, DateTimeKind.Utc).AddTicks(9025),
                            Name = "Project1",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("ca4f2d5d-ea74-47b9-8485-ec387ef6620a"),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 296, DateTimeKind.Utc).AddTicks(9631),
                            Name = "Project2",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("928b4863-b1d7-45c7-9e36-a218313b5fb1"),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 296, DateTimeKind.Utc).AddTicks(9721),
                            Name = "Project3",
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tasks.Buisness.TaskCommentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("CommentType")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("cfcf0b99-a7eb-423d-9a2f-d95e60268f2d"),
                            CommentType = (byte)5,
                            Content = new byte[] { 84, 97, 115, 107, 32, 99, 111, 110, 116, 101, 110, 116 },
                            TaskId = new Guid("cd0be526-1342-4669-b540-cf079ece407d")
                        });
                });

            modelBuilder.Entity("Tasks.Buisness.TaskEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CancelDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e4e30ed-cd5d-454f-b236-49e5263b1765"),
                            CancelDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 322, DateTimeKind.Utc).AddTicks(6823),
                            EndDate = new DateTime(2023, 2, 21, 13, 43, 29, 320, DateTimeKind.Utc).AddTicks(9377),
                            Name = "Project1Task1",
                            ProjectId = new Guid("7e4e30ed-cd5d-454f-b236-49e5263b1765"),
                            StartDate = new DateTime(2023, 2, 21, 12, 43, 29, 320, DateTimeKind.Utc).AddTicks(9240),
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("cd0be526-1342-4669-b540-cf079ece407d"),
                            CancelDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 324, DateTimeKind.Utc).AddTicks(3006),
                            EndDate = new DateTime(2023, 2, 21, 12, 43, 29, 324, DateTimeKind.Utc).AddTicks(2797),
                            Name = "Project1Task2",
                            ProjectId = new Guid("7e4e30ed-cd5d-454f-b236-49e5263b1765"),
                            StartDate = new DateTime(2023, 2, 21, 12, 43, 29, 324, DateTimeKind.Utc).AddTicks(2752),
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = new Guid("10c05605-20db-4720-bdab-e87c3b7ccb50"),
                            CancelDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreateDate = new DateTime(2023, 2, 21, 12, 43, 29, 324, DateTimeKind.Utc).AddTicks(3892),
                            Name = "Project2Task1",
                            ProjectId = new Guid("ca4f2d5d-ea74-47b9-8485-ec387ef6620a"),
                            UpdateDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tasks.Buisness.TaskCommentEntity", b =>
                {
                    b.HasOne("Tasks.Buisness.TaskEntity", "Task")
                        .WithMany("Comments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Tasks.Buisness.TaskEntity", b =>
                {
                    b.HasOne("Tasks.Buisness.ProjectEntity", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Tasks.Buisness.ProjectEntity", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Tasks.Buisness.TaskEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
